name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    strategy:
      matrix:
        include:
          # Linux tests
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          
          # macOS tests
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          
          # Windows tests
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustc, rust-std, cargo
      
      - name: Install target
        run: rustup target add ${{ matrix.target }}
      
      # Install Linux dependencies
      - name: Install Linux build dependencies
        if: contains(matrix.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      
      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install unzip
      
      # Set up cross-compilation for ARM64 Linux
      - name: Set up cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      # Build binary
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: ${{ contains(matrix.target, 'linux') && '-C target-feature=+crt-static' || '' }}
      
      # Test installer
      - name: Test installer
        shell: bash
        run: |
          # Create test directory
          mkdir -p test_dir
          cd test_dir
          
          # Copy installer and binary
          cp ../ts-cdk-installer.sh .
          mkdir -p ./${{ matrix.target }}/
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp ../target/${{ matrix.target }}/release/ts-cdk.exe ./${{ matrix.target }}/ts-cdk.exe
          else
            cp ../target/${{ matrix.target }}/release/ts-cdk ./${{ matrix.target }}/ts-cdk
          fi
          
          # Create archive in the same directory as installer
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a ts-cdk-${{ matrix.target }}.zip ./${{ matrix.target }}/ts-cdk.exe
          else
            tar czf ts-cdk-${{ matrix.target }}.tar.gz -C ./${{ matrix.target }} ts-cdk
          fi
          
          # Get absolute path for the download URL
          ABSOLUTE_PATH="$(cd "$(dirname ".")" && pwd)/$(basename ".")"
          
          # Test installer with absolute path and target architecture
          INSTALLER_DOWNLOAD_URL="file://${ABSOLUTE_PATH}" \
          INSTALLER_TARGET_TRIPLE="${{ matrix.target }}" \
          sh ts-cdk-installer.sh
          
          # Test installed binary
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export PATH="$HOME/.ts-cdk/bin:$PATH"
            ts-cdk.exe --help || true
          else
            export PATH="$HOME/.ts-cdk/bin:$PATH"
            ts-cdk --help || true
          fi 
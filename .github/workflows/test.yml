name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux tests
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          
          # macOS tests
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          
          # Windows tests
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Install Rust toolchain
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustc, rust-std, cargo
      
      - name: Install target
        run: rustup target add ${{ matrix.target }}
      
      # Install Linux dependencies
      - name: Install Linux build dependencies
        if: contains(matrix.target, 'linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      
      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install unzip
      
      # Set up cross-compilation for ARM64 Linux
      - name: Set up cross-compilation
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      
      # Build binary
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          RUSTFLAGS: ${{ contains(matrix.target, 'linux') && '-C target-feature=+crt-static' || '' }}
      
      # Create release artifacts
      - name: Create release artifacts
        shell: bash
        run: |
          mkdir -p release/v0.1.4
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            7z a release/v0.1.4/ts-cdk-${{ matrix.target }}.zip ./target/${{ matrix.target }}/release/ts-cdk.exe
          else
            tar czf release/v0.1.4/ts-cdk-${{ matrix.target }}.tar.gz -C ./target/${{ matrix.target }}/release ts-cdk
          fi
      
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: release
          
  test:
    needs: build
    strategy:
      matrix:
        include:
          # Linux tests
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          
          # macOS tests
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
          
          # Windows tests
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      # Install Windows dependencies
      - name: Install Windows dependencies
        if: matrix.os == 'windows-latest'
        run: |
          choco install unzip
      
      # Download artifacts
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-${{ matrix.target }}
          path: release
      
      # Test installer
      - name: Test installer
        shell: bash
        run: |
          # Copy installer
          cp ts-cdk-installer.sh release/
          cd release
          
          # Create a simple HTTP server to serve the files
          python3 -m http.server 8080 &
          sleep 2  # Wait for server to start
          
          # Test installer with local HTTP server
          INSTALLER_DOWNLOAD_URL="http://localhost:8080/v0.1.4" \
          INSTALLER_TARGET_TRIPLE="${{ matrix.target }}" \
          sh ts-cdk-installer.sh
          
          # Kill the HTTP server
          kill %1
          
          # Test installed binary
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            export PATH="$HOME/.ts-cdk/bin:$PATH"
            ts-cdk.exe --help || true
          else
            export PATH="$HOME/.ts-cdk/bin:$PATH"
            ts-cdk --help || true
          fi